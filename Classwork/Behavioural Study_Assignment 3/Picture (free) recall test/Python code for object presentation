
from __future__ import absolute_import, division

from psychopy import locale_setup
from psychopy import prefs
from psychopy import sound, gui, visual, core, data, event, logging, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)

import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle
import os  # handy system and path functions
import sys  # to get file system encoding

from psychopy.hardware import keyboard



# Ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
os.chdir(_thisDir)

# Store info about the experiment session
psychopyVersion = '2020.2.10'
expName = 'Picture(free)RecallTest'  # from the Builder filename that created this script
expInfo = {'participant': '', 'session': '001'}
dlg = gui.DlgFromDict(dictionary=expInfo, sortKeys=False, title=expName)
if dlg.OK == False:
    core.quit()  # user pressed cancel
expInfo['date'] = data.getDateStr()  # add a simple timestamp
expInfo['expName'] = expName
expInfo['psychopyVersion'] = psychopyVersion

# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
filename = _thisDir + os.sep + u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])

# An ExperimentHandler isn't essential but helps with data saving
thisExp = data.ExperimentHandler(name=expName, version='',
    extraInfo=expInfo, runtimeInfo=None,
    originPath='C:\\Users\\Aarthi\\Desktop\\RED_Picture(free)RecallTest.py',
    savePickle=True, saveWideText=True,
    dataFileName=filename)
# save a log file for detail verbose info
logFile = logging.LogFile(filename+'.log', level=logging.EXP)
logging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file

endExpNow = False  # flag for 'escape' or other condition => quit the exp
frameTolerance = 0.001  # how close to onset before 'same' frame

# Start Code - component code to be run after the window creation

# Setup the Window
win = visual.Window(
    size=[1536, 864], fullscr=True, screen=0, 
    winType='pyglet', allowGUI=False, allowStencil=False,
    monitor='testMonitor', color=[1.000,-1.000,-1.000], colorSpace='rgb',
    blendMode='avg', useFBO=True, 
    units='height')
# store frame rate of monitor if we can measure it
expInfo['frameRate'] = win.getActualFrameRate()
if expInfo['frameRate'] != None:
    frameDur = 1.0 / round(expInfo['frameRate'])
else:
    frameDur = 1.0 / 60.0  # could not measure, so guess

# create a default keyboard (e.g. to check for escape)
defaultKeyboard = keyboard.Keyboard()

# Initialize components for Routine "Instructions"
InstructionsClock = core.Clock()
instructions = visual.TextStim(win=win, name='instructions',
    text='I will show a few pictures of familiar objects for a minute. Look carefully and try to remember the objects. Later, you will be asked to type out the names of objects as many as you can remember in any order. \n\nPress the space bar to continue.',
    font='Times New Roman',
    pos=(0, 0), height=0.05, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);
key_resp = keyboard.Keyboard()

# Initialize components for Routine "Object_Presentation"
Object_PresentationClock = core.Clock()
image01 = visual.ImageStim(
    win=win,
    name='image01', 
    image='Brain_Imaging/Behavioural study/Picture recall test_object images/Objects_Red(1).png', mask=None,
    ori=0, pos=(0, 0), size=(1.5,0.8),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=0.0)
BlankScreen = visual.TextStim(win=win, name='BlankScreen',
    text=None,
    font='Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-1.0);
image02 = visual.ImageStim(
    win=win,
    name='image02', 
    image='Brain_Imaging/Behavioural study/Picture recall test_object images/Objects_Red(2).png', mask=None,
    ori=0, pos=(0, 0), size=(1.5, 0.8),
    color=[1,1,1], colorSpace='rgb', opacity=1,
    flipHoriz=False, flipVert=False,
    texRes=128, interpolate=True, depth=-2.0)
BlankScreen2 = visual.TextStim(win=win, name='BlankScreen2',
    text=None,
    font='Arial',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=-3.0);

# Initialize components for Routine "End_Session1"
End_Session1Clock = core.Clock()
End = visual.TextStim(win=win, name='End',
    text='End of Session 1.\n\nThank you.',
    font='Times New Roman',
    pos=(0, 0), height=0.1, wrapWidth=None, ori=0, 
    color='white', colorSpace='rgb', opacity=1, 
    languageStyle='LTR',
    depth=0.0);

# Create some handy timers
globalClock = core.Clock()  # to track the time since experiment started
routineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine 

# ------Prepare to start Routine "Instructions"-------
continueRoutine = True
# update component parameters for each repeat
key_resp.keys = []
key_resp.rt = []
_key_resp_allKeys = []
# keep track of which components have finished
InstructionsComponents = [instructions, key_resp]
for thisComponent in InstructionsComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
InstructionsClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1

# -------Run Routine "Instructions"-------
while continueRoutine:
    # get current time
    t = InstructionsClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=InstructionsClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *instructions* updates
    if instructions.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        instructions.frameNStart = frameN  # exact frame index
        instructions.tStart = t  # local t and not account for scr refresh
        instructions.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(instructions, 'tStartRefresh')  # time at next scr refresh
        instructions.setAutoDraw(True)
    
    # *key_resp* updates
    waitOnFlip = False
    if key_resp.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        key_resp.frameNStart = frameN  # exact frame index
        key_resp.tStart = t  # local t and not account for scr refresh
        key_resp.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(key_resp, 'tStartRefresh')  # time at next scr refresh
        key_resp.status = STARTED
        # keyboard checking is just starting
        waitOnFlip = True
        win.callOnFlip(key_resp.clock.reset)  # t=0 on next screen flip
        win.callOnFlip(key_resp.clearEvents, eventType='keyboard')  # clear events on next screen flip
    if key_resp.status == STARTED and not waitOnFlip:
        theseKeys = key_resp.getKeys(keyList=['space'], waitRelease=False)
        _key_resp_allKeys.extend(theseKeys)
        if len(_key_resp_allKeys):
            key_resp.keys = _key_resp_allKeys[-1].name  # just the last key pressed
            key_resp.rt = _key_resp_allKeys[-1].rt
            # a response ends the routine
            continueRoutine = False
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in InstructionsComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Instructions"-------
for thisComponent in InstructionsComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('instructions.started', instructions.tStartRefresh)
thisExp.addData('instructions.stopped', instructions.tStopRefresh)
# check responses
if key_resp.keys in ['', [], None]:  # No response was made
    key_resp.keys = None
thisExp.addData('key_resp.keys',key_resp.keys)
if key_resp.keys != None:  # we had a response
    thisExp.addData('key_resp.rt', key_resp.rt)
thisExp.addData('key_resp.started', key_resp.tStartRefresh)
thisExp.addData('key_resp.stopped', key_resp.tStopRefresh)
thisExp.nextEntry()
# the Routine "Instructions" was not non-slip safe, so reset the non-slip timer
routineTimer.reset()

# ------Prepare to start Routine "Object_Presentation"-------
continueRoutine = True
routineTimer.add(61.000000)
# update component parameters for each repeat
# keep track of which components have finished
Object_PresentationComponents = [image01, BlankScreen, image02, BlankScreen2]
for thisComponent in Object_PresentationComponents:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
Object_PresentationClock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1

# -------Run Routine "Object_Presentation"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = Object_PresentationClock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=Object_PresentationClock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *image01* updates
    if image01.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        image01.frameNStart = frameN  # exact frame index
        image01.tStart = t  # local t and not account for scr refresh
        image01.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(image01, 'tStartRefresh')  # time at next scr refresh
        image01.setAutoDraw(True)
    if image01.status == STARTED:
        # is it time to stop? (based on global clock, using actual start)
        if tThisFlipGlobal > image01.tStartRefresh + 30-frameTolerance:
            # keep track of stop time/frame for later
            image01.tStop = t  # not accounting for scr refresh
            image01.frameNStop = frameN  # exact frame index
            win.timeOnFlip(image01, 'tStopRefresh')  # time at next scr refresh
            image01.setAutoDraw(False)
    
    # *BlankScreen* updates
    if BlankScreen.status == NOT_STARTED and tThisFlip >= 30-frameTolerance:
        # keep track of start time/frame for later
        BlankScreen.frameNStart = frameN  # exact frame index
        BlankScreen.tStart = t  # local t and not account for scr refresh
        BlankScreen.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(BlankScreen, 'tStartRefresh')  # time at next scr refresh
        BlankScreen.setAutoDraw(True)
    if BlankScreen.status == STARTED:
        # is it time to stop? (based on global clock, using actual start)
        if tThisFlipGlobal > BlankScreen.tStartRefresh + 0.5-frameTolerance:
            # keep track of stop time/frame for later
            BlankScreen.tStop = t  # not accounting for scr refresh
            BlankScreen.frameNStop = frameN  # exact frame index
            win.timeOnFlip(BlankScreen, 'tStopRefresh')  # time at next scr refresh
            BlankScreen.setAutoDraw(False)
    
    # *image02* updates
    if image02.status == NOT_STARTED and tThisFlip >= 30.5-frameTolerance:
        # keep track of start time/frame for later
        image02.frameNStart = frameN  # exact frame index
        image02.tStart = t  # local t and not account for scr refresh
        image02.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(image02, 'tStartRefresh')  # time at next scr refresh
        image02.setAutoDraw(True)
    if image02.status == STARTED:
        # is it time to stop? (based on global clock, using actual start)
        if tThisFlipGlobal > image02.tStartRefresh + 30-frameTolerance:
            # keep track of stop time/frame for later
            image02.tStop = t  # not accounting for scr refresh
            image02.frameNStop = frameN  # exact frame index
            win.timeOnFlip(image02, 'tStopRefresh')  # time at next scr refresh
            image02.setAutoDraw(False)
    
    # *BlankScreen2* updates
    if BlankScreen2.status == NOT_STARTED and tThisFlip >= 60.5-frameTolerance:
        # keep track of start time/frame for later
        BlankScreen2.frameNStart = frameN  # exact frame index
        BlankScreen2.tStart = t  # local t and not account for scr refresh
        BlankScreen2.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(BlankScreen2, 'tStartRefresh')  # time at next scr refresh
        BlankScreen2.setAutoDraw(True)
    if BlankScreen2.status == STARTED:
        # is it time to stop? (based on global clock, using actual start)
        if tThisFlipGlobal > BlankScreen2.tStartRefresh + 0.5-frameTolerance:
            # keep track of stop time/frame for later
            BlankScreen2.tStop = t  # not accounting for scr refresh
            BlankScreen2.frameNStop = frameN  # exact frame index
            win.timeOnFlip(BlankScreen2, 'tStopRefresh')  # time at next scr refresh
            BlankScreen2.setAutoDraw(False)
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in Object_PresentationComponents:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "Object_Presentation"-------
for thisComponent in Object_PresentationComponents:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('image01.started', image01.tStartRefresh)
thisExp.addData('image01.stopped', image01.tStopRefresh)
thisExp.addData('BlankScreen.started', BlankScreen.tStartRefresh)
thisExp.addData('BlankScreen.stopped', BlankScreen.tStopRefresh)
thisExp.addData('image02.started', image02.tStartRefresh)
thisExp.addData('image02.stopped', image02.tStopRefresh)
thisExp.addData('BlankScreen2.started', BlankScreen2.tStartRefresh)
thisExp.addData('BlankScreen2.stopped', BlankScreen2.tStopRefresh)

# ------Prepare to start Routine "End_Session1"-------
continueRoutine = True
routineTimer.add(10.000000)
# update component parameters for each repeat
# keep track of which components have finished
End_Session1Components = [End]
for thisComponent in End_Session1Components:
    thisComponent.tStart = None
    thisComponent.tStop = None
    thisComponent.tStartRefresh = None
    thisComponent.tStopRefresh = None
    if hasattr(thisComponent, 'status'):
        thisComponent.status = NOT_STARTED
# reset timers
t = 0
_timeToFirstFrame = win.getFutureFlipTime(clock="now")
End_Session1Clock.reset(-_timeToFirstFrame)  # t0 is time of first possible flip
frameN = -1

# -------Run Routine "End_Session1"-------
while continueRoutine and routineTimer.getTime() > 0:
    # get current time
    t = End_Session1Clock.getTime()
    tThisFlip = win.getFutureFlipTime(clock=End_Session1Clock)
    tThisFlipGlobal = win.getFutureFlipTime(clock=None)
    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
    # update/draw components on each frame
    
    # *End* updates
    if End.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
        # keep track of start time/frame for later
        End.frameNStart = frameN  # exact frame index
        End.tStart = t  # local t and not account for scr refresh
        End.tStartRefresh = tThisFlipGlobal  # on global time
        win.timeOnFlip(End, 'tStartRefresh')  # time at next scr refresh
        End.setAutoDraw(True)
    if End.status == STARTED:
        # is it time to stop? (based on global clock, using actual start)
        if tThisFlipGlobal > End.tStartRefresh + 10-frameTolerance:
            # keep track of stop time/frame for later
            End.tStop = t  # not accounting for scr refresh
            End.frameNStop = frameN  # exact frame index
            win.timeOnFlip(End, 'tStopRefresh')  # time at next scr refresh
            End.setAutoDraw(False)
    
    # check for quit (typically the Esc key)
    if endExpNow or defaultKeyboard.getKeys(keyList=["escape"]):
        core.quit()
    
    # check if all components have finished
    if not continueRoutine:  # a component has requested a forced-end of Routine
        break
    continueRoutine = False  # will revert to True if at least one component still running
    for thisComponent in End_Session1Components:
        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
            continueRoutine = True
            break  # at least one component has not yet finished
    
    # refresh the screen
    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
        win.flip()

# -------Ending Routine "End_Session1"-------
for thisComponent in End_Session1Components:
    if hasattr(thisComponent, "setAutoDraw"):
        thisComponent.setAutoDraw(False)
thisExp.addData('End.started', End.tStartRefresh)
thisExp.addData('End.stopped', End.tStopRefresh)

# Flip one final time so any remaining win.callOnFlip() 
# and win.timeOnFlip() tasks get executed before quitting
win.flip()

# these shouldn't be strictly necessary (should auto-save)
thisExp.saveAsWideText(filename+'.csv', delim='auto')
thisExp.saveAsPickle(filename)
logging.flush()
# make sure everything is closed down
thisExp.abort()  # or data files will save again on exit
win.close()
core.quit()
